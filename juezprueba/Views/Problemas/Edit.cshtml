@model juezprueba.Models.Problema
@{
    ViewData["Title"] = "Editar Problema";
    var nivelesDificultad = new List<SelectListItem>
    {
        new SelectListItem { Text = "Fácil", Value = "Fácil" },
        new SelectListItem { Text = "Media", Value = "Media" },
        new SelectListItem { Text = "Difícil", Value = "Difícil" }
    };
}

@section ParticleBackground {
    <script src="~/js/particleBackground.js"></script>
}

@section Styles {
    <style>
        .main-container {
            margin-top: 2rem;
            margin-bottom: 2rem;
        }

        .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            position: relative;
            overflow: hidden;
        }

            .card-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
                opacity: 0.3;
            }

        .card-header-content {
            position: relative;
            z-index: 1;
        }

        .card {
            border: none;
            box-shadow: 0 20px 60px rgba(0,0,0,0.12), 0 4px 16px rgba(0,0,0,0.08);
            border-radius: 20px;
            overflow: hidden;
            background-color: var(--bs-body-bg);
        }

        /* Dark mode styles */
        [data-bs-theme="dark"] .card {
            background-color: #212529;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3), 0 4px 16px rgba(0,0,0,0.2);
        }

        [data-bs-theme="dark"] .card-body {
            background: linear-gradient(135deg, #212529 0%, #343a40 100%) !important;
        }

        [data-bs-theme="dark"] .form-control,
        [data-bs-theme="dark"] .form-select {
            background-color: #343a40;
            border-color: #495057;
            color: #ffffff;
        }

            [data-bs-theme="dark"] .form-control:focus,
            [data-bs-theme="dark"] .form-select:focus {
                background-color: #495057;
                border-color: #667eea;
                color: #ffffff;
            }

        [data-bs-theme="dark"] .form-label {
            color: #e9ecef;
        }

        [data-bs-theme="dark"] .field-icon {
            color: #667eea;
        }

        [data-bs-theme="dark"] .character-counter {
            color: #adb5bd;
        }

        [data-bs-theme="dark"] .form-actions {
            background: linear-gradient(135deg, #343a40 0%, #495057 100%);
            border-color: #495057;
        }

        [data-bs-theme="dark"] .form-text {
            background-color: #343a40;
            color: #adb5bd;
            border-left-color: #667eea;
        }

        [data-bs-theme="dark"] .loading-content {
            background-color: #212529;
            color: #ffffff;
        }

        [data-bs-theme="dark"] .input-group-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-color: #667eea;
            color: white;
        }

        [data-bs-theme="dark"] .difficulty-badge {
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }

        [data-bs-theme="dark"] .badge-facil {
            background: linear-gradient(135deg, #198754 0%, #20c997 100%);
            color: #ffffff;
            border-color: #198754;
        }

        [data-bs-theme="dark"] .badge-media {
            background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);
            color: #000000;
            border-color: #fd7e14;
        }

        [data-bs-theme="dark"] .badge-dificil {
            background: linear-gradient(135deg, #dc3545 0%, #e74c3c 100%);
            color: #ffffff;
            border-color: #dc3545;
        }

        .form-group {
            margin-bottom: 2rem;
        }

        .form-control, .form-select {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }

            .form-control:focus, .form-select:focus {
                border-color: #667eea;
                box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
                transform: translateY(-2px);
            }

        .form-label {
            color: #495057;
            font-weight: 600;
            margin-bottom: 0.75rem;
            font-size: 1rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 12px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
        }

            .btn-primary:hover {
                background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
            }

        .btn-outline-secondary {
            border: 2px solid #6c757d;
            border-radius: 12px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

            .btn-outline-secondary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(108, 117, 125, 0.2);
            }

        .difficulty-badge {
            font-size: 0.875rem;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .badge-facil {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            color: #155724;
            border: 2px solid #b8dabc;
        }

        .badge-media {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            color: #856404;
            border: 2px solid #faebcc;
        }

        .badge-dificil {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
            color: #721c24;
            border: 2px solid #f1b0b7;
        }

        .icon-title {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            .icon-title h3 {
                font-size: 1.75rem;
                font-weight: 700;
                text-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }

            .icon-title i {
                font-size: 1.5rem;
                filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
            }

        .field-icon {
            color: #667eea;
            margin-right: 0.75rem;
            font-size: 1.1rem;
        }

        .character-counter {
            font-size: 0.875rem;
            color: #6c757d;
            text-align: right;
            margin-top: 0.5rem;
            font-weight: 500;
        }

        .form-actions {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 2rem;
            border-radius: 16px;
            margin-top: 2.5rem;
            border: 1px solid #e9ecef;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }

        .card-body {
            padding: 3rem !important;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }

        .form-text {
            color: #6c757d;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            padding: 0.5rem 0.75rem;
            background-color: #f8f9fa;
            border-radius: 8px;
            border-left: 3px solid #667eea;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.8) 0%, rgba(118, 75, 162, 0.8) 100%);
            z-index: 9999;
            backdrop-filter: blur(5px);
        }

        .loading-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 3rem;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .input-group-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px solid #667eea;
            color: white;
            font-weight: 600;
            border-radius: 0 12px 12px 0;
        }

        .header-subtitle {
            font-size: 0.95rem;
            opacity: 0.9;
            margin-top: 0.5rem;
            font-weight: 400;
        }
    </style>
}

<div class="container-fluid main-container">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="card shadow-lg border-0">
                <div class="card-header">
                    <div class="card-header-content">
                        <div class="icon-title">
                            <i class="fas fa-edit"></i>
                            <h3 class="mb-0">@ViewData["Title"]</h3>
                        </div>
                        <div class="header-subtitle">Modifica los detalles del problema</div>
                    </div>
                </div>

                <div class="card-body">
                    <form asp-action="Edit" method="post" id="editForm" novalidate>
                        <input type="hidden" asp-for="Id" />

                        <!-- Título -->
                        <div class="form-group">
                            <label asp-for="Titulo" class="form-label fw-bold">
                                <i class="fas fa-heading field-icon"></i>Título del Problema
                            </label>
                            <input asp-for="Titulo"
                                   class="form-control form-control-lg"
                                   placeholder="Ingrese un título descriptivo"
                                   maxlength="100"
                                   data-counter="titulo-counter" />
                            <div class="character-counter">
                                <span id="titulo-counter">0</span>/100 caracteres
                            </div>
                            <span asp-validation-for="Titulo" class="text-danger"></span>
                        </div>

                        <!-- Descripción -->
                        <div class="form-group">
                            <label asp-for="Descripcion" class="form-label fw-bold">
                                <i class="fas fa-align-left field-icon"></i>Descripción
                            </label>
                            <textarea asp-for="Descripcion"
                                      class="form-control"
                                      rows="6"
                                      placeholder="Describe detalladamente el problema, incluyendo ejemplos y restricciones"
                                      maxlength="2000"
                                      data-counter="descripcion-counter"></textarea>
                            <div class="character-counter">
                                <span id="descripcion-counter">0</span>/2000 caracteres
                            </div>
                            <span asp-validation-for="Descripcion" class="text-danger"></span>
                        </div>

                        <!-- Dificultad -->
                        <div class="form-group">
                            <label asp-for="Dificultad" class="form-label fw-bold">
                                <i class="fas fa-chart-line field-icon"></i>Nivel de Dificultad
                            </label>
                            <select asp-for="Dificultad"
                                    class="form-select"
                                    asp-items="nivelesDificultad"
                                    id="dificultadSelect">
                                <option value="" disabled>Seleccione una dificultad</option>
                            </select>
                            <div id="dificultadBadge" class="mt-2"></div>
                            <span asp-validation-for="Dificultad" class="text-danger"></span>
                        </div>

                        <!-- Puntos -->
                        <div class="form-group">
                            <label asp-for="Puntos" class="form-label fw-bold">
                                <i class="fas fa-star field-icon"></i>Puntos
                            </label>
                            <div class="input-group">
                                <input asp-for="Puntos"
                                       class="form-control"
                                       type="number"
                                       min="1"
                                       max="1000"
                                       step="1"
                                       placeholder="Ej: 100" />
                                <span class="input-group-text">pts</span>
                            </div>
                            <div class="form-text">
                                <i class="fas fa-info-circle"></i>
                                Los puntos deben estar entre 1 y 1000
                            </div>
                            <span asp-validation-for="Puntos" class="text-danger"></span>
                        </div>

                        <!-- Botones de acción -->
                        <div class="form-actions">
                            <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary btn-lg px-4">
                                        <i class="fas fa-save me-2"></i>Actualizar Problema
                                    </button>
                                    <a asp-action="Index" class="btn btn-outline-secondary btn-lg px-4">
                                        <i class="fas fa-times me-2"></i>Cancelar
                                    </a>
                                </div>
                                <div class="text-muted">
                                    <small>
                                        <i class="fas fa-clock me-1"></i>
                                        Última modificación: <span id="lastModified"></span>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay 
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-content">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2">Actualizando problema...</p>
    </div>
</div>
-->
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // 1. Función para obtener el tema actual
            function getCurrentTheme() {
                const htmlEl = document.documentElement;
                const currentAttr = htmlEl.getAttribute('data-bs-theme');
                const savedTheme = localStorage.getItem('bs-theme');
                return currentAttr || savedTheme || 'light';
            }

            // 2. Configuración de SweetAlert según el tema
            function getSwalTheme(theme) {
                return {
                    color: theme === 'dark' ? '#f8f9fa' : '#212529',
                    background: theme === 'dark' ? '#212529' : '#ffffff',
                    confirmButtonColor: theme === 'dark' ? '#0d6efd' : '#3085d6',
                    cancelButtonColor: theme === 'dark' ? '#6c757d' : '#aaa'
                };
            }

            // 3. Contador de caracteres
            function updateCharacterCounter(input, counterId) {
                const counter = document.getElementById(counterId);
                const length = input.value.length;
                const maxLength = input.getAttribute('maxlength');
                counter.textContent = length;

                if (length > maxLength * 0.9) {
                    counter.style.color = '#dc3545';
                } else if (length > maxLength * 0.7) {
                    counter.style.color = '#ffc107';
                } else {
                    counter.style.color = '#6c757d';
                }
            }

            // Inicializar contadores
            const tituloInput = document.querySelector('[data-counter="titulo-counter"]');
            const descripcionInput = document.querySelector('[data-counter="descripcion-counter"]');

            if (tituloInput) {
                updateCharacterCounter(tituloInput, 'titulo-counter');
                tituloInput.addEventListener('input', function() {
                    updateCharacterCounter(this, 'titulo-counter');
                });
            }

            if (descripcionInput) {
                updateCharacterCounter(descripcionInput, 'descripcion-counter');
                descripcionInput.addEventListener('input', function() {
                    updateCharacterCounter(this, 'descripcion-counter');
                });
            }

            // 4. Badge de dificultad
            function updateDifficultyBadge(difficulty) {
                const badgeContainer = document.getElementById('dificultadBadge');
                if (!difficulty) {
                    badgeContainer.innerHTML = '';
                    return;
                }

                let badgeClass = '';
                let icon = '';

                switch(difficulty) {
                    case 'Fácil':
                        badgeClass = 'badge-facil';
                        icon = 'fas fa-smile';
                        break;
                    case 'Media':
                        badgeClass = 'badge-media';
                        icon = 'fas fa-meh';
                        break;
                    case 'Difícil':
                        badgeClass = 'badge-dificil';
                        icon = 'fas fa-frown';
                        break;
                }

                badgeContainer.innerHTML = `
                    <span class="difficulty-badge ${badgeClass}">
                        <i class="${icon} me-1"></i>${difficulty}
                    </span>
                `;
            }

            // Inicializar badge con valor actual
            const dificultadSelect = document.getElementById('dificultadSelect');
            if (dificultadSelect) {
                updateDifficultyBadge(dificultadSelect.value);
                dificultadSelect.addEventListener('change', function() {
                    updateDifficultyBadge(this.value);
                });
            }

            // 5. Mostrar última modificación
            document.getElementById('lastModified').textContent = new Date().toLocaleString();

            // 6. Confirmación de edición con SweetAlert
            document.getElementById('editForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const form = this;
                const currentTheme = getCurrentTheme();
                const swalTheme = getSwalTheme(currentTheme);

                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                Swal.fire({
                    title: '¿Actualizar problema?',
                    html: `
                        <div class="text-start">
                            <p>¿Estás seguro de actualizar este problema con los siguientes cambios?</p>
                            <div class="alert alert-${currentTheme === 'dark' ? 'dark' : 'light'} mt-3">
                                <strong><i class="fas fa-heading"></i> Título:</strong> ${form.Titulo.value}<br>
                                <strong><i class="fas fa-chart-line"></i> Dificultad:</strong> ${form.Dificultad.value}<br>
                                <strong><i class="fas fa-star"></i> Puntos:</strong> ${form.Puntos.value} pts
                            </div>
                        </div>
                    `,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Sí, actualizar',
                    cancelButtonText: 'Cancelar',
                    reverseButtons: true,
                    customClass: {
                        confirmButton: 'btn btn-primary mx-2',
                        cancelButton: 'btn btn-secondary mx-2'
                    },
                    buttonsStyling: false,
                    color: swalTheme.color,
                    background: swalTheme.background,
                    backdrop: currentTheme === 'dark' ? 'rgba(0,0,0,0.7)' : 'rgba(0,0,0,0.4)',
                    confirmButtonColor: swalTheme.confirmButtonColor,
                    cancelButtonColor: swalTheme.cancelButtonColor
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Mostrar loader
                        Swal.fire({
                            title: 'Actualizando problema...',
                            html: 'Por favor espera mientras guardamos los cambios',
                            allowOutsideClick: false,
                            color: swalTheme.color,
                            background: swalTheme.background,
                            didOpen: () => Swal.showLoading()
                        });

                        // Enviar formulario manualmente
                        const formData = new FormData(form);
                        fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        }).then(async (response) => {
                            // Manejar tanto respuestas JSON como HTML
                            const contentType = response.headers.get('content-type');
                            if (contentType && contentType.includes('application/json')) {
                                return response.json();
                            } else {
                                // Si no es JSON, asumimos redirección o respuesta HTML
                                if (response.redirected) {
                                    return { redirectUrl: response.url };
                                }
                                const text = await response.text();
                                return { html: text };
                            }
                        }).then(data => {
                            if (data.redirectUrl) {
                                window.location.href = data.redirectUrl;
                            } else if (data.success) {
                                Swal.fire({
                                    title: '¡Problema actualizado!',
                                    text: 'Los cambios se han guardado correctamente',
                                    icon: 'success',
                                    confirmButtonColor: swalTheme.confirmButtonColor,
                                    color: swalTheme.color,
                                    background: swalTheme.background
                                }).then(() => {
                                    window.location.href = '@Url.Action("Index", "Problemas")';
                                });
                            } else {
                                // Manejar errores de validación del servidor
                                let errorMessage = data.message || 'Error al actualizar el problema';
                                if (data.errors) {
                                    // Mostrar errores de validación en los campos correspondientes
                                    Object.entries(data.errors).forEach(([field, errors]) => {
                                        const input = form.querySelector(`[name="${field}"]`);
                                        if (input) {
                                            showFieldError(input, errors.join(', '));
                                        }
                                    });
                                    errorMessage = 'Por favor corrige los errores en el formulario';
                                }
                                throw new Error(errorMessage);
                            }
                        }).catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                title: 'Error',
                                text: error.message || 'Ocurrió un error al actualizar el problema',
                                icon: 'error',
                                confirmButtonColor: swalTheme.confirmButtonColor,
                                color: swalTheme.color,
                                background: swalTheme.background
                            });
                        });
                    }
                });
            });

            // 7. Validación personalizada
            function setupCustomValidation() {
                const form = document.getElementById('editForm');

                form.addEventListener('submit', function(e) {
                    let isValid = true;

                    // Validar título
                    const titulo = document.querySelector('[name="Titulo"]');
                    if (titulo.value.trim().length < 5) {
                        showFieldError(titulo, 'El título debe tener al menos 5 caracteres');
                        isValid = false;
                    }

                    // Validar descripción
                    const descripcion = document.querySelector('[name="Descripcion"]');
                    if (descripcion.value.trim().length < 20) {
                        showFieldError(descripcion, 'La descripción debe tener al menos 20 caracteres');
                        isValid = false;
                    }

                    // Validar puntos
                    const puntos = document.querySelector('[name="Puntos"]');
                    const puntosValue = parseInt(puntos.value);
                    if (isNaN(puntosValue) || puntosValue < 1 || puntosValue > 1000) {
                        showFieldError(puntos, 'Los puntos deben estar entre 1 y 1000');
                        isValid = false;
                    }

                    if (!isValid) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
            }

            function showFieldError(field, message) {
                const errorSpan = field.parentNode.querySelector('.text-danger');
                if (errorSpan) {
                    errorSpan.textContent = message;
                }
                field.classList.add('is-invalid');

                // Remover error al cambiar el campo
                field.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                    if (errorSpan) errorSpan.textContent = '';
                }, { once: true });
            }

            setupCustomValidation();
        });
    </script>
}