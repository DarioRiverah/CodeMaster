@model juezprueba.Models.Problema
@{
    ViewData["Title"] = "Detalles del Problema";
}

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --success-gradient: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        --warning-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --danger-gradient: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);
        --info-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --card-shadow: 0 10px 30px -5px rgba(0, 0, 0, 0.1);
        --card-shadow-hover: 0 20px 40px -5px rgba(0, 0, 0, 0.15);
        --border-radius: 16px;
        --transition: all 0.5s cubic-bezier(0.16, 1, 0.3, 1);
        --color-transition: background-color 1.2s ease, color 1.2s ease, border-color 1.2s ease;
        --glass-bg: rgba(255, 255, 255, 0.1);
        --glass-border: rgba(255, 255, 255, 0.2);
        --bg-animation-duration: 15s;
    }

    [data-bs-theme="dark"] {
        --card-shadow: 0 10px 30px -5px rgba(0, 0, 0, 0.3);
        --card-shadow-hover: 0 20px 40px -5px rgba(0, 0, 0, 0.4);
        --glass-bg: rgba(0, 0, 0, 0.2);
        --glass-border: rgba(255, 255, 255, 0.1);
    }

    /* Animación de fondo */
    body {
        background: linear-gradient(-45deg, #f5f7fa, #e4e8f0, #f0f4f9, #e8ecf2);
        background-size: 400% 400%;
        animation: gradientBG var(--bg-animation-duration) ease infinite;
        transition: var(--color-transition);
        min-height: 100vh;
        margin: 0;
    }

    [data-bs-theme="dark"] body {
        background: linear-gradient(-45deg, #1a1a2e, #16213e, #0f3460, #1a1a2e);
        background-size: 400% 400%;
    }

    @@keyframes gradientBG {
        0% {
            background-position: 0% 50%;
        }

        50% {
            background-position: 100% 50%;
        }

        100% {
            background-position: 0% 50%;
        }
    }

    /* Aplicar transición suave a todos los elementos */
    body, .container, .card, .btn, .badge, .input-output-box,
    .test-case-card, .section-icon, .gradient-header, .main-card,
    .card-section, .content-card {
        transition: var(--color-transition);
    }

    .problems-container {
        animation: fadeInUp 1s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .main-card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        backdrop-filter: blur(12px);
        transition: var(--transition), var(--color-transition);
        background: rgba(var(--bs-body-bg-rgb), 0.85);
    }

        .main-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--card-shadow-hover);
            backdrop-filter: blur(16px);
        }

    .gradient-header {
        background: var(--primary-gradient);
        padding: 2rem;
        position: relative;
        overflow: hidden;
        transition: var(--color-transition);
    }

        .gradient-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.15) 0%, transparent 70%);
            animation: shimmer 8s ease-in-out infinite;
            transition: var(--color-transition);
        }

    @@keyframes shimmer {
        0%, 100% {
            transform: rotate(0deg);
            opacity: 0.5;
        }

        50% {
            transform: rotate(180deg);
            opacity: 0.8;
        }
    }

    .header-content {
        position: relative;
        z-index: 2;
    }

    .header-title {
        font-weight: 700;
        font-size: 1.5rem;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        color: white;
        transition: var(--color-transition);
    }

    .card-section {
        padding: 1.5rem;
        border-bottom: 1px solid var(--bs-border-color);
        transition: var(--color-transition);
    }

    .section-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        flex-shrink: 0;
        transition: var(--color-transition);
    }

    .section-title {
        font-weight: 600;
        color: var(--bs-emphasis-color);
        transition: var(--color-transition);
    }

    .content-card {
        padding: 1.5rem;
        border-radius: 12px;
        background: rgba(var(--bs-body-bg-rgb), 0.9);
        border-left: 4px solid var(--bs-primary);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
        transition: var(--color-transition);
        backdrop-filter: blur(8px);
    }

    .test-case-card {
        border: none;
        border-radius: 12px;
        overflow: hidden;
        transition: var(--transition), var(--color-transition);
        background: rgba(var(--bs-body-bg-rgb), 0.9);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        backdrop-filter: blur(6px);
    }

        .test-case-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(10px);
        }

    .test-case-header {
        background: var(--info-gradient);
        color: white;
        padding: 0.75rem 1rem;
        transition: var(--color-transition);
    }

    .test-case-body {
        padding: 1rem;
        transition: var(--color-transition);
    }

    .input-output-box {
        padding: 0.75rem;
        border-radius: 8px;
        font-family: 'Monaco', 'Menlo', monospace;
        font-size: 0.85rem;
        margin-bottom: 1rem;
        background: rgba(var(--bs-primary-rgb), 0.05);
        border: 1px solid rgba(var(--bs-primary-rgb), 0.1);
        transition: var(--transition), var(--color-transition);
    }

        .input-output-box:hover {
            border-color: rgba(var(--bs-primary-rgb), 0.2);
            transform: translateX(2px);
        }

    .input-label {
        color: var(--bs-primary);
        transition: var(--color-transition);
    }

    .output-label {
        color: var(--bs-success);
        transition: var(--color-transition);
    }

    .btn-modern {
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.9rem;
        padding: 8px 16px;
        border: none;
        transition: var(--transition), var(--color-transition);
        position: relative;
        overflow: hidden;
        display: inline-flex;
        align-items: center;
        backdrop-filter: blur(4px);
    }

        .btn-modern::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.8s ease, height 0.8s ease;
        }

        .btn-modern:hover::before {
            width: 300px;
            height: 300px;
        }

        .btn-modern:hover {
            transform: translateY(-2px);
            backdrop-filter: blur(6px);
        }

    .btn-warning-modern {
        background: var(--warning-gradient);
        color: white;
    }

        .btn-warning-modern:hover {
            box-shadow: 0 6px 20px rgba(240, 147, 251, 0.4);
        }

    .btn-primary-modern {
        background: var(--primary-gradient);
        color: white;
    }

        .btn-primary-modern:hover {
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

    .pulse-animation {
        animation: pulse 3s infinite ease-in-out;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(240, 147, 251, 0.4);
        }

        50% {
            transform: scale(1.02);
            box-shadow: 0 0 0 12px rgba(240, 147, 251, 0);
        }

        100% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(240, 147, 251, 0);
        }
    }

    .empty-state {
        background: linear-gradient(135deg, var(--bs-info-bg-subtle) 0%, var(--bs-primary-bg-subtle) 100%);
        border: 2px dashed var(--bs-info);
        border-radius: var(--border-radius);
        padding: 3rem;
        text-align: center;
        transition: var(--color-transition);
        backdrop-filter: blur(6px);
    }

    .badge-count {
        background: var(--success-gradient);
        color: white;
        font-size: 0.8rem;
        padding: 0.35rem 0.75rem;
        border-radius: 20px;
        margin-left: 0.5rem;
        transition: var(--color-transition);
    }

    /* Efecto de onda al hacer clic */
    .ripple-effect {
        position: relative;
        overflow: hidden;
    }

        .ripple-effect .ripple {
            position: absolute;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.4);
            transform: scale(0);
            animation: ripple 0.8s linear;
            pointer-events: none;
        }

    @@keyframes ripple {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .gradient-header {
            padding: 1.5rem;
        }

        .header-title {
            font-size: 1.25rem;
        }

        .btn-modern {
            width: 100%;
            justify-content: center;
            margin-bottom: 0.5rem;
        }

        .test-case-card {
            margin-bottom: 1rem;
        }

        :root {
            --bg-animation-duration: 20s;
        }
    }
</style>

<div class="container mt-4 problems-container">
    <!-- Título principal -->
    <h1 class="page-title mb-4">
        <i class="bi bi-code-square me-3"></i>
        @ViewData["Title"]
    </h1>

    <!-- Tarjeta principal -->
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card main-card">
                <!-- Header con gradiente -->
                <div class="gradient-header">
                    <div class="header-content">
                        <h2 class="header-title">
                            <i class="bi bi-puzzle me-2"></i>
                            @Model.Titulo
                        </h2>
                    </div>
                </div>

                <!-- Contenido principal -->
                <div class="card-body p-0">
                    <!-- Descripción -->
                    <div class="card-section">
                        <div class="d-flex align-items-center mb-3">
                            <div class="section-icon" style="background: var(--primary-gradient);">
                                <i class="bi bi-file-text"></i>
                            </div>
                            <h5 class="section-title mb-0">Descripción del Problema</h5>
                        </div>
                        <div class="content-card">
                            <p class="mb-0">@Model.Descripcion</p>
                        </div>
                    </div>

                    <!-- Casos de Prueba -->
                    <div class="card-section">
                        <div class="d-flex align-items-center mb-3">
                            <div class="section-icon" style="background: var(--success-gradient);">
                                <i class="bi bi-check2-square"></i>
                            </div>
                            <h5 class="section-title mb-0">Casos de Prueba</h5>
                            @if (Model.CasosDePrueba != null && Model.CasosDePrueba.Any())
                            {
                                <span class="badge-count">
                                    @Model.CasosDePrueba.Count() casos
                                </span>
                            }
                        </div>

                        @if (Model.CasosDePrueba != null && Model.CasosDePrueba.Any())
                        {
                            <div class="row">
                                @foreach (var caso in Model.CasosDePrueba.Select((value, index) => new { value, index }))
                                {
                                    <div class="col-lg-6 mb-3">
                                        <div class="test-case-card h-100">
                                            <div class="test-case-header">
                                                <small class="fw-semibold">
                                                    <i class="bi bi-play-circle me-2"></i>
                                                    Caso de Prueba #@(caso.index + 1)
                                                </small>
                                            </div>
                                            <div class="test-case-body">
                                                <div class="mb-3">
                                                    <div class="d-flex align-items-center mb-2">
                                                        <i class="bi bi-arrow-right-circle input-label me-2"></i>
                                                        <strong>Input:</strong>
                                                    </div>
                                                    <div class="input-output-box">
                                                        @caso.value.Input
                                                    </div>
                                                </div>
                                                <div>
                                                    <div class="d-flex align-items-center mb-2">
                                                        <i class="bi bi-arrow-left-circle output-label me-2"></i>
                                                        <strong>Output Esperado:</strong>
                                                    </div>
                                                    <div class="input-output-box">
                                                        @caso.value.OutputEsperado
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-info-circle-fill empty-icon"></i>
                                <h5>No hay casos de prueba disponibles</h5>
                                <p class="text-muted">Este problema no tiene casos de prueba definidos.</p>
                            </div>
                        }
                    </div>

                    <!-- Botones de acción -->
                    <div class="card-section text-center" style="border-bottom: none;">
                        <div class="d-flex flex-wrap justify-content-center gap-3">
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning-modern btn-modern pulse-animation ripple-effect">
                                <i class="bi bi-pencil-square me-2"></i>
                                Editar Problema
                            </a>
                            <a asp-action="Index" class="btn btn-primary-modern btn-modern ripple-effect">
                                <i class="bi bi-arrow-left me-2"></i>
                                Volver a la Lista
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Efecto ripple para los botones
    document.querySelectorAll('.ripple-effect').forEach(button => {
        button.addEventListener('click', function(e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            const ripple = document.createElement('span');
            ripple.classList.add('ripple');
            ripple.style.left = `${x}px`;
            ripple.style.top = `${y}px`;

            this.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 800);
        });
    });

    // Transición suave al cambiar de tema
    document.addEventListener('DOMContentLoaded', function() {
        // Configurar el observador de cambios de tema
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === 'data-bs-theme') {
                    // Aplicar clase de transición para el cambio de fondo
                    document.body.classList.add('theme-changing');

                    // Eliminar la clase después de que termine la transición
                    setTimeout(() => {
                        document.body.classList.remove('theme-changing');
                    }, 1200);
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-bs-theme']
        });

        // Efecto de partículas para el fondo (opcional)
        const canvas = document.createElement('canvas');
        canvas.style.position = 'fixed';
        canvas.style.top = '0';
        canvas.style.left = '0';
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        canvas.style.zIndex = '-1';
        canvas.style.opacity = '0.3';
        canvas.style.pointerEvents = 'none';
        canvas.style.transition = 'opacity 1.2s ease';
        document.body.appendChild(canvas);

        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const particles = [];
        const particleCount = window.innerWidth < 768 ? 30 : 60;

        for (let i = 0; i < particleCount; i++) {
            particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                size: Math.random() * 3 + 1,
                speedX: Math.random() * 1 - 0.5,
                speedY: Math.random() * 1 - 0.5,
                color: getComputedStyle(document.documentElement).getPropertyValue('--bs-primary')
            });
        }

        function animateParticles() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Actualizar color de partículas según el tema
            const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-primary');

            for (let i = 0; i < particles.length; i++) {
                const p = particles[i];
                p.color = primaryColor;

                ctx.fillStyle = p.color;
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
                ctx.fill();

                p.x += p.speedX;
                p.y += p.speedY;

                if (p.x < 0 || p.x > canvas.width) p.speedX *= -1;
                if (p.y < 0 || p.y > canvas.height) p.speedY *= -1;
            }

            requestAnimationFrame(animateParticles);
        }

        animateParticles();

        window.addEventListener('resize', function() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    });
</script>