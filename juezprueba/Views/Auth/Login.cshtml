@model juezprueba.ViewModels.LoginViewModel
@{
    ViewData["Title"] = "Iniciar Sesión";
    Layout = "_Layout";
}

@section ParticleBackground {
    <script src="~/js/particleBackground.js"></script>
}
<div class="auth-wrapper">
    <div class="auth-container">
        <!-- Sección de imagen con fondo -->
        <div class="auth-side-panel">
            <div class="auth-side-content">
                <h2 class="display-5 fw-bold mb-4">¡Bienvenido de vuelta!</h2>
                <p class="lead mb-5">Conéctate para acceder a todos los problemas y desafíos.</p>
            </div>
        </div>

        <!-- Sección del formulario -->
        <div class="auth-main-panel">
            <div class="auth-form-container">
                <div class="text-center mb-5">
                    <h1 class="h3 fw-bold">Iniciar Sesión</h1>
                    <p class="text-muted">Ingresa tus credenciales para acceder</p>
                </div>

                <form asp-action="Login" method="post" class="needs-validation" >
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                    <div class="mb-4">
                        <label asp-for="Email" class="form-label">Correo Electrónico</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                            <input asp-for="Email" class="form-control form-control-lg" placeholder="tu@correo.com" required>
                        </div>
                        <span asp-validation-for="Email" class="text-danger small"></span>
                    </div>

                    <div class="mb-4">
                        <label asp-for="Password" class="form-label">Contraseña</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                            <input asp-for="Password" type="password" class="form-control form-control-lg" placeholder="••••••••" required>
                            <button class="btn btn-outline-secondary toggle-password" type="button">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <span asp-validation-for="Password" class="text-danger small"></span>
                    </div>

                    <div class="mb-4 form-check">
                        <input asp-for="RememberMe" class="form-check-input">
                        <label asp-for="RememberMe" class="form-check-label">Recordar mi sesión</label>
                    </div>

                    <button type="submit" class="btn btn-success btn-lg w-100 mb-3">
                        <i class="fas fa-sign-in-alt me-2"></i>Ingresar
                    </button>

                    <div class="text-center mt-4">
                        <p class="mb-0">¿No tienes una cuenta? <a asp-action="Register" class="text-decoration-none">Regístrate aquí</a></p>
                    </div>
                    <div class="text-center mt-4">
                        <a asp-action="ForgotPassword" asp-controller="Auth">¿Olvidaste tu contraseña?</a>
                    </div>

                </form>

                <!-- FORMULARIO DE LOGIN CON GOOGLE (SEPARADO) -->
                <form asp-action="ExternalLogin" asp-controller="Auth" method="post" class="d-flex justify-content-center mt-4">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="provider" value="Google" />
                    <button type="submit" class="btn btn-danger btn-lg d-flex align-items-center">
                        <i class="fab fa-google me-2"></i> <!-- Icono de Google -->
                        Iniciar sesión con Google
                    </button>
                </form>

            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .auth-wrapper {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: calc(100vh - 120px);
            padding: 2rem 1rem;
        }

        .auth-container {
            display: flex;
            max-width: 1000px;
            width: 100%;
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .auth-side-panel {
            flex: 1;
            padding: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background-image: url('https://images.unsplash.com/photo-1515879218367-8466d910aaa4?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
            background-size: cover;
            background-position: center;
            position: relative;
        }

            .auth-side-panel::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(111, 66, 193, 0.7); /* Morado con opacidad */
            }

        .auth-side-content {
            max-width: 400px;
            text-align: center;
            position: relative;
            z-index: 1;
            color: white;
        }

        .auth-main-panel {
            flex: 1;
            padding: 3rem;
            background-color: var(--bs-body-bg);
            border-left: 1px solid var(--bs-border-color);
        }

        .auth-form-container {
            max-width: 400px;
            margin: 0 auto;
        }

        .toggle-password {
            cursor: pointer;
        }

        /* Estilo adicional para el botón verde */
        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

            .btn-success:hover {
                background-color: #218838;
                border-color: #1e7e34;
            }

        @@media (max-width: 768px) {
            .auth-container {
                flex-direction: column;
            }

            .auth-side-panel {
                display: none;
            }

            .auth-main-panel {
                border-left: none;
                border-top: 1px solid var(--bs-border-color);
            }
        }

        /* Para el tema oscuro */
        [data-bs-theme="dark"] .swal2-popup {
            border: 1px solid #495057;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }

        [data-bs-theme="dark"] .swal2-title {
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .swal2-content {
            color: #dee2e6;
        }

        /* Para el tema claro */
        [data-bs-theme="light"] .swal2-popup {
            border: 1px solid #dee2e6;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Función para obtener el tema actual
        function getCurrentTheme() {
            const htmlEl = document.documentElement;
            const currentAttr = htmlEl.getAttribute('data-bs-theme');
            const savedTheme = localStorage.getItem('bs-theme');
            return currentAttr || savedTheme || 'light';
        }

        // Configuración de SweetAlert según el tema
        function getSwalTheme(theme) {
            return {
                color: theme === 'dark' ? '#f8f9fa' : '#212529',
                background: theme === 'dark' ? '#212529' : '#ffffff',
                confirmButtonColor: theme === 'dark' ? '#0d6efd' : '#3085d6'
            };
        }

        // Manejo del formulario de login
        document.querySelector('form[action="/Auth/Login"]').addEventListener('submit', async function(e) {
            e.preventDefault();
            const form = this;
            const currentTheme = getCurrentTheme();
            const swalTheme = getSwalTheme(currentTheme);

            // Validación básica del formulario
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            // Mostrar loader
            Swal.fire({
                title: 'Iniciando sesión...',
                html: 'Por favor espera mientras verificamos tus credenciales',
                allowOutsideClick: false,
                color: swalTheme.color,
                background: swalTheme.background,
                didOpen: () => Swal.showLoading()
            });

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                // Verificar si hay redirección (éxito)
                if (response.redirected) {
                    Swal.fire({
                        title: '¡Inicio de sesión exitoso!',
                        text: 'Redirigiendo a la página principal...',
                        icon: 'success',
                        confirmButtonColor: swalTheme.confirmButtonColor,
                        color: swalTheme.color,
                        background: swalTheme.background,
                        timer: 1000, // 1 segundo
                        timerProgressBar: true,
                        showConfirmButton: false, // Ocultar botón OK
                        willClose: () => {
                            window.location.href = response.url;
                        }
                    });
                } else {
                    // Si no hay redirección, obtener el HTML de respuesta
                    const html = await response.text();

                    // Crear un documento temporal para analizar el HTML
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Buscar errores de validación
                    const validationSummary = doc.querySelector('.alert.alert-danger');
                    const fieldErrors = doc.querySelectorAll('.text-danger');

                    if (validationSummary || fieldErrors.length > 0) {
                        let errorMessage = '';

                        // Obtener mensaje de error general
                        if (validationSummary && validationSummary.textContent.trim()) {
                            errorMessage = validationSummary.textContent.trim();
                        }
                        // Obtener mensaje de error de campo específico (ej: email no confirmado)
                        else if (fieldErrors.length > 0) {
                            errorMessage = Array.from(fieldErrors)
                                .map(el => el.textContent.trim())
                                .filter(text => text.length > 0)
                                .join('\n');
                        } else {
                            errorMessage = 'Credenciales incorrectas';
                        }

                        Swal.fire({
                            title: 'Error',
                            text: errorMessage,
                            icon: 'error',
                            confirmButtonColor: '#d33',
                            color: swalTheme.color,
                            background: swalTheme.background
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: 'Ocurrió un error desconocido',
                            icon: 'error',
                            confirmButtonColor: '#d33',
                            color: swalTheme.color,
                            background: swalTheme.background
                        });
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Ocurrió un error al conectar con el servidor',
                    icon: 'error',
                    confirmButtonColor: '#d33',
                    color: swalTheme.color,
                    background: swalTheme.background
                });
            }
        });

        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function() {
                const input = this.closest('.input-group').querySelector('input');
                const icon = this.querySelector('i');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.replace('fa-eye', 'fa-eye-slash');
                } else {
                    input.type = 'password';
                    icon.classList.replace('fa-eye-slash', 'fa-eye');
                }
            });
        });

        // Validación del formulario
        (function() {
            'use strict'
            const forms = document.querySelectorAll('.needs-validation')

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })();
    </script>
}