@model juezprueba.Models.Problema

@{
    ViewBag.Title = "Resolver Problema";
}

<div class="container-fluid p-0 mt-3" data-bs-theme="@(ViewBag.CurrentTheme ?? "dark")">
    <!-- Problema - Mantiene el morado en ambos temas -->
    <div class="card mb-3 shadow-sm">
        <div class="card-header bg-purple-dark">
            <!-- Eliminada la condición para mantener siempre morado -->
            <h4 class="mb-0 mt-1">@Model.Titulo</h4>
        </div>
        <div class="card-body p-3 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white" : "bg-white text-dark")">
            @Html.Raw(Model.Descripcion)
        </div>
    </div>

    <!-- Editor con toolbar estilo IDE -->
    <form id="codeForm" method="post" asp-action="Resolver" asp-route-id="@Model.Id" class="card shadow-sm" style="height: 60vh;">
        <div class="card-header d-flex justify-content-between align-items-center @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white border-secondary" : "bg-light text-dark border-light") py-1">
            <!-- Nombre del archivo editable -->
            <div class="d-flex align-items-center">
                <div class="input-group input-group-sm" style="width: 200px;">
                    <span class="input-group-text @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-secondary border-secondary text-light" : "bg-light border-light text-dark")"><i class="bi bi-file-code"></i></span>
                    <input type="text" id="fileNameInput" class="form-control @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white border-secondary" : "bg-white text-dark border-light")" value="main.c">
                </div>
            </div>

            <!-- Toolbar principal -->
            <div class="d-flex align-items-center">
                <div class="btn-group me-2">
                    <button type="submit" id="btnRun" class="btn btn-sm btn-success" title="Ejecutar (F9)">
                        <i class="bi bi-play-fill"></i> Run
                    </button>
                    <button type="button" id="btnStop" class="btn btn-sm btn-danger" title="Detener" disabled>
                        <i class="bi bi-stop-fill"></i> Stop
                    </button>
                </div>

                <div class="btn-group me-2">
                    <button type="button" id="btnSave" class="btn btn-sm btn-info" title="Guardar (Ctrl+S)">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <button type="button" id="btnBeautify" class="btn btn-sm @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "btn-outline-light border-secondary" : "btn-outline-dark border-light")" title="Formatear código">
                        <i class="bi bi-braces"></i> Beautify
                    </button>
                </div>
            </div>

            <div class="d-flex align-items-center">
                <label for="languageId" class="form-label me-2 mb-0 small @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-light" : "text-dark")">Language</label>
                <select id="languageId" name="languageId" class="form-select form-select-sm w-auto @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white border-secondary" : "bg-white text-dark border-light")">
                    <option value="52">C</option>
                    <option value="54">C++</option>
                    <option value="62">Java</option>
                    <option value="71">Python</option>
                    <option value="63">JavaScript</option>
                </select>
                <button type="button" class="btn btn-sm @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "btn-outline-light border-secondary" : "btn-outline-dark border-light") ms-2" title="Configuración">
                    <i class="bi bi-gear-fill"></i>
                </button>
            </div>
        </div>

        <!-- Contenedor principal del editor -->
        <div class="tab-content" style="height: calc(100% - 85px); position: relative; @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "background-color: #1e1e1e;" : "background-color: #f8f9fa;")">
            <div class="tab-pane fade show active h-100" id="main-content" role="tabpanel" aria-labelledby="main-tab">
                <textarea name="sourceCode" id="codeEditor" class="d-none">@(ViewBag.SourceCode ?? "")</textarea>
                <div id="editor" style="position: absolute; top: 0; bottom: 0; left: 0; right: 0;"></div>
            </div>
        </div>

        <!-- Panel inferior con pestañas para resultados -->
        <div class="card-footer @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white border-secondary" : "bg-light text-dark border-light") p-0">
            <ul class="nav nav-tabs @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "nav-tabs-dark" : "nav-tabs-light") border-bottom-0" id="resultTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active py-1 px-3 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white" : "text-dark")" id="output-tab" data-bs-toggle="tab" data-bs-target="#output-content" type="button">
                        <i class="bi bi-terminal-fill me-1"></i> Resultados
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link py-1 px-3 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white" : "text-dark")" id="input-tab" data-bs-toggle="tab" data-bs-target="#input-content" type="button">
                        <i class="bi bi-arrow-down-square me-1"></i> Input
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link py-1 px-3 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white" : "text-dark")" id="stderr-tab" data-bs-toggle="tab" data-bs-target="#stderr-content" type="button">
                        <i class="bi bi-exclamation-triangle me-1"></i> Error
                    </button>
                </li>
            </ul>

            <div class="tab-content @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "border-secondary" : "border-light")">
                <div class="tab-pane fade show active" id="output-content" role="tabpanel">
                    <div class="p-2 small @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white" : "bg-white text-dark")" style="min-height: 100px; max-height: 150px; overflow-y: auto;">
                        @if (ViewBag.Resultados != null)
                        {
                            <ul class="list-unstyled mb-0">
                                @{
                                    int caseNumber = 1;
                                    foreach (var resultado in ViewBag.Resultados)
                                    {
                                        var resultadoTexto = resultado.ToString();
                                        var indiceSeparador = resultadoTexto.IndexOf(":");
                                        if (indiceSeparador >= 0)
                                        {
                                            resultadoTexto = resultadoTexto.Substring(indiceSeparador + 1).Trim();
                                        }

                                        <li class="p-2 @(resultado.ToString().Contains("✅") ? "text-success" : resultado.ToString().Contains("❌") ? "text-danger" : (ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white" : "text-dark")">
                                            Caso @(caseNumber++): @resultadoTexto
                                        </li>
                                    }
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="@((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white-50" : "text-muted")">Ejecuta tu código para ver los resultados...</div>
                        }
                    </div>
                </div>
                <div class="tab-pane fade" id="input-content" role="tabpanel">
                    <div class="p-2 small @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white" : "bg-white text-dark")" style="min-height: 100px; max-height: 150px; overflow-y: auto;">
                        <div class="mb-2 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white" : "text-dark")">Casos de prueba:</div>
                        <ul class="list-unstyled mb-0">
                            @{
                                int inputCaseNumber = 1;
                                foreach (var caso in Model.CasosDePrueba)
                                {
                                    <li class="p-1 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-white" : "text-dark")">
                                        <strong>Caso @(inputCaseNumber++):</strong>
                                        <pre class="mb-0 @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "text-light bg-dark border-secondary" : "text-dark bg-light border-light") p-1 border">@caso.Input</pre>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div class="tab-pane fade" id="stderr-content" role="tabpanel">
                    <div class="p-2 small @((ViewBag.CurrentTheme ?? "dark") == "dark" ? "bg-dark text-white" : "bg-white text-dark")" style="min-height: 100px; max-height: 150px; overflow-y: auto;">
                        <pre id="errorText" class="mb-0 text-danger">@(ViewBag.Error ?? "")</pre>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Estilos CSS actualizados -->
<style>
    /* Estilos base */
    .container-fluid.mt-3 {
        margin-top: 1rem !important;
    }

    /* Estilos del editor */
    #editor {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }

    .ace_editor {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace !important;
        line-height: 1.5 !important;
    }

    /* Estilos para el tema dark */
    [data-bs-theme="dark"] {
        --bs-border-color: #495057;
    }

        [data-bs-theme="dark"] .ace_gutter {
            background-color: #1a1a1a !important;
            color: #7a7a7a !important;
        }

        [data-bs-theme="dark"] .ace-monokai {
            background-color: #1e1e1e !important;
        }

        [data-bs-theme="dark"] .form-control,
        [data-bs-theme="dark"] .form-select {
            background-color: #212529;
            color: #f8f9fa;
            border-color: #495057;
        }

    /* Estilos para el tema light */
    [data-bs-theme="light"] {
        --editor-bg: #ffffff;
        --editor-gutter-bg: #f8f9fa;
        --editor-text: #212529;
        --card-bg: #ffffff;
        --card-text: #212529;
        --border-color: #dee2e6;
        --tab-bg: #e9ecef;
        --tab-active-bg: #ffffff;
        --input-bg: #ffffff;
        --input-text: #212529;
        --input-border: #ced4da;
    }

    [data-bs-theme="light"] .ace_gutter {
        background-color: #f8f9fa !important;
        color: #6c757d !important;
    }

    [data-bs-theme="light"] .ace-chrome {
        background-color: #ffffff !important;
    }

    /* Estilos para las pestañas dark */
    [data-bs-theme="dark"] {
        --editor-bg: #1e1e1e;
        --editor-gutter-bg: #1a1a1a;
        --editor-text: #f8f9fa;
        --card-bg: #2d2d2d;
        --card-text: #f8f9fa;
        --border-color: #495057;
        --tab-bg: #252525;
        --tab-active-bg: #1e1e1e;
        --input-bg: #212529;
        --input-text: #f8f9fa;
        --input-border: #495057;
    }

    [data-bs-theme="dark"] .nav-tabs-dark .nav-link {
        color: #adb5bd;
        background-color: #252525;
        border: 1px solid #495057;
        border-bottom: none;
        margin-right: 2px;
        font-size: 0.85rem;
    }

        [data-bs-theme="dark"] .nav-tabs-dark .nav-link:hover {
            color: #fff;
            background-color: #2c2c2c;
            border-color: #6c757d;
        }

        [data-bs-theme="dark"] .nav-tabs-dark .nav-link.active {
            color: #fff;
            background-color: #1e1e1e;
            border-color: #495057;
            border-bottom-color: transparent;
        }

    /* Estilos para las pestañas light */
    [data-bs-theme="light"] .nav-tabs-light .nav-link {
        color: #495057;
        background-color: #e9ecef;
        border: 1px solid #dee2e6;
        border-bottom: none;
        margin-right: 2px;
        font-size: 0.85rem;
    }

        [data-bs-theme="light"] .nav-tabs-light .nav-link:hover {
            color: #212529;
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }

        [data-bs-theme="light"] .nav-tabs-light .nav-link.active {
            color: #495057;
            background-color: #ffffff;
            border-color: #dee2e6;
            border-bottom-color: transparent;
        }


    /* Aplicar estilos a los componentes */
    .card {
        background-color: var(--card-bg);
        color: var(--card-text);
        border-color: var(--border-color);
    }

    .card-header.bg-purple-dark {
        background-color: #4a148c !important; /* Fuerza el morado */
        color: white !important;
        border-color: #4a148c !important;
    }

    .form-control, .form-select {
        background-color: var(--input-bg);
        color: var(--input-text);
        border-color: var(--input-border);
    }

    .nav-tabs .nav-link {
        background-color: var(--tab-bg);
        color: var(--card-text);
        border-color: var(--border-color);
    }

        .nav-tabs .nav-link.active {
            background-color: var(--tab-active-bg);
            color: var(--card-text);
            border-color: var(--border-color);
        }

    /* Mantener el morado en el botón de guardar */
    .btn-info {
        background-color: #0dcaf0;
        border-color: #0dcaf0;
    }

    /* Estilos para los bordes */
    [data-bs-theme="dark"] .border-secondary {
        border-color: #495057 !important;
    }

    [data-bs-theme="light"] .border-light {
        border-color: #dee2e6 !important;
    }

    /* Estilos para los botones outline */
    [data-bs-theme="dark"] .btn-outline-light {
        border-color: #6c757d;
    }

    [data-bs-theme="light"] .btn-outline-dark {
        border-color: #dee2e6;
    }

    /* Estilos para el scrollbar */
    .ace_scrollbar-v {
        width: 10px !important;
    }

    [data-bs-theme="dark"] .ace_scrollbar-v::-webkit-scrollbar-thumb {
        background-color: #555 !important;
    }

    [data-bs-theme="light"] .ace_scrollbar-v::-webkit-scrollbar-thumb {
        background-color: #ced4da !important;
    }

    .ace_scrollbar-v::-webkit-scrollbar {
        width: 8px;
    }

    .ace_scrollbar-v::-webkit-scrollbar-thumb {
        border-radius: 10px;
    }

    /* Estilos para los pre */
    pre {
        background-color: var(--bs-tertiary-bg);
        color: var(--bs-body-color);
        border: 1px solid var(--bs-border-color);
        border-radius: 4px;
        padding: 8px;
        overflow-x: auto;
    }

    /* Estilos para el card header */
    .bg-purple-dark {
        background-color: #4a148c;
        color: white;
    }

    .bg-purple-light {
        background-color: #7b2cbf;
        color: white;
    }
</style>

<!-- JavaScript actualizado -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Determinar el tema actual
        const currentTheme = '@(ViewBag.CurrentTheme ?? "dark")';

        // Inicialización del editor ACE
        const editor = ace.edit("editor", {
            theme: currentTheme === "dark" ? "ace/theme/monokai" : "ace/theme/chrome",
            mode: "ace/mode/c_cpp",
            fontSize: "14px",
            showPrintMargin: false,
            highlightActiveLine: true,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            enableSnippets: true,
            fixedWidthGutter: true,
            useWorker: true,
            displayIndentGuides: true,
            scrollPastEnd: 0.5,
            tabSize: 4,
            useSoftTabs: true,
            indentedSoftWrap: false,
            wrap: false,
            cursorStyle: "ace",
            showInvisibles: false,
            behavioursEnabled: true,
            animatedScroll: false
        });

        // Configuración crítica para sincronización perfecta
        editor.$blockScrolling = Infinity;
        editor.renderer.setScrollMargin(10, 10);

        // Establecer valor inicial del editor
        editor.session.setValue(document.getElementById('codeEditor').value);
        editor.clearSelection();
        editor.renderer.updateFull(true);

        // Sincronizar textarea con el editor ACE
        editor.session.on('change', function() {
            document.getElementById('codeEditor').value = editor.getValue();
        });

        // Cambiar modo de lenguaje
        const languageMap = {
            '52': 'c_cpp',  // C
            '54': 'c_cpp',  // C++
            '62': 'java',   // Java
            '71': 'python', // Python
            '63': 'javascript' // JavaScript
        };

        const extensions = {
            '52': '.c',
            '54': '.cpp',
            '62': '.java',
            '71': '.py',
            '63': '.js'
        };

        document.getElementById('languageId').addEventListener('change', function() {
            const lang = this.value;
            editor.session.setMode(`ace/mode/${languageMap[lang]}`);

            // Actualizar extensión del nombre de archivo
            const fileNameInput = document.getElementById('fileNameInput');
            const currentName = fileNameInput.value.split('.')[0];
            fileNameInput.value = currentName + extensions[lang];

            // Forzar redibujado después de cambiar el modo
            setTimeout(() => {
                editor.renderer.updateFull(true);
            }, 50);
        });

        // Función para formatear el código
        document.getElementById('btnBeautify').addEventListener('click', function() {
            const beautify = ace.require("ace/ext/beautify");
            beautify.beautify(editor.session);
        });

        // Función para guardar el código
        document.getElementById('btnSave').addEventListener('click', function() {
            const blob = new Blob([editor.getValue()], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = document.getElementById('fileNameInput').value;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        // Función para detener ejecución (simulada)
        document.getElementById('btnStop').addEventListener('click', function() {
            document.getElementById('btnRun').disabled = false;
            this.disabled = true;

            document.getElementById('errorText').textContent = 'Ejecución detenida por el usuario.';
            document.getElementById('stderr-tab').click();
        });

        // Manejo del formulario con AJAX
        document.getElementById('codeForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const btnRun = document.getElementById('btnRun');
            const btnStop = document.getElementById('btnStop');

            btnRun.disabled = true;
            btnStop.disabled = false;
            btnRun.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Running...';

            const formData = new FormData(this);

            fetch(this.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const resultadosContainer = doc.querySelector('#output-content');

                if (resultadosContainer) {
                    document.getElementById('output-content').innerHTML = resultadosContainer.innerHTML;
                    document.getElementById('output-tab').click();
                }

                const errorContainer = doc.querySelector('#stderr-content');
                if (errorContainer) {
                    document.getElementById('stderr-content').innerHTML = errorContainer.innerHTML;
                    if (errorContainer.textContent.trim() !== '') {
                        document.getElementById('stderr-tab').click();
                    }
                }
            })
            .catch(error => {
                document.getElementById('errorText').textContent = 'Error al comunicarse con el servidor: ' + error;
                document.getElementById('stderr-tab').click();
            })
            .finally(() => {
                btnRun.disabled = false;
                btnStop.disabled = true;
                btnRun.innerHTML = '<i class="bi bi-play-fill"></i> Run';
            });
        });

        // Atajos de teclado
        editor.commands.addCommand({
            name: 'run',
            bindKey: {win: 'F9', mac: 'F9'},
            exec: function() {
                document.getElementById('btnRun').click();
            }
        });

        editor.commands.addCommand({
            name: 'save',
            bindKey: {win: 'Ctrl-S', mac: 'Command-S'},
            exec: function() {
                document.getElementById('btnSave').click();
                return true;
            }
        });

        // Función para cambiar el tema del editor cuando cambia el tema de la aplicación
    function updateEditorTheme() {
        const theme = document.documentElement.getAttribute('data-bs-theme') || 'dark';
        editor.setTheme(theme === 'dark' ? 'ace/theme/monokai' : 'ace/theme/chrome');

        // Actualizar todos los elementos excepto el card-header morado
        document.querySelectorAll('.card:not(.bg-purple-dark), .card-body, .card-footer, .form-control, .form-select, .nav-tabs, .tab-content').forEach(el => {
            el.classList.toggle('bg-dark', theme === 'dark');
            el.classList.toggle('text-white', theme === 'dark');
            el.classList.toggle('bg-light', theme === 'light');
            el.classList.toggle('text-dark', theme === 'light');
        });

        // Forzar redibujado
        setTimeout(() => {
            editor.renderer.updateFull(true);
        }, 50);
    }

        // Observar cambios en el atributo data-bs-theme
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === 'data-bs-theme') {
                    updateEditorTheme();
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true
        });

        // Redimensionamiento del editor
        function resizeEditor() {
            editor.resize(true);
            editor.renderer.updateFull(true);
        }

        // Inicializar el tema correctamente
        updateEditorTheme();

        // Forzar un redibujado después de cargar completamente
        setTimeout(resizeEditor, 100);

        // Manejar cambios de tamaño de ventana
        window.addEventListener('resize', resizeEditor);

        // Evento adicional para forzar actualización al hacer clic en el editor
        document.getElementById('editor').addEventListener('click', function() {
            setTimeout(() => {
                editor.renderer.updateFull(true);
            }, 10);
        });
    });
</script>