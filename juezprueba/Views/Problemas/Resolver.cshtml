@model juezprueba.Models.Problema

@{
    ViewBag.Title = "Resolver Problema";
}

@section ParticleBackground {
    <script src="~/js/particleBackground.js"></script>
}
<div class="container-fluid p-0" id="mainContainer">
    <!-- Problema -->
    <div class="card mb-4 shadow-sm theme-card mt-4">
        <!-- Header con efecto animado -->
        <div class="gradient-header theme-card-header">
            <div class="header-content">
                <div class="d-flex align-items-center">
                    <div class="section-icon" style="background: var(--primary-gradient);">
                        <i class="bi bi-puzzle-fill"></i>
                    </div>
                    <h4 class="header-title mb-0">@Model.Titulo</h4>
                </div>
            </div>
        </div>
        <div class="card-body p-4 theme-card-body">
            @Html.Raw(Model.Descripcion)
        </div>
    </div>

    <!-- Editor con toolbar estilo IDE -->
    <form id="codeForm" method="post" asp-action="Resolver" asp-route-id="@Model.Id" class="editor-container shadow-lg" style="height: 65vh;">
        <!-- Toolbar mejorado -->
        <div class="editor-toolbar d-flex justify-content-between align-items-center py-2 px-3">
            <!-- Nombre del archivo editable -->
            <div class="d-flex align-items-center">
                <div class="input-group input-group-sm file-input-group">
                    <span class="input-group-text">
                        <i class="bi bi-file-code"></i>
                    </span>
                    <input type="text" id="fileNameInput" class="form-control" value="main.c" placeholder="nombre_archivo">
                </div>
            </div>

            <!-- Toolbar principal -->
            <div class="d-flex align-items-center">
                <div class="btn-group me-3" role="group">
                    <button type="submit" id="btnRun" class="btn btn-sm btn-success d-flex align-items-center" title="Ejecutar (F9)">
                        <i class="bi bi-play-fill me-1"></i>
                        <span class="d-none d-md-inline">Run</span>
                    </button>
                    <button type="button" id="btnStop" class="btn btn-sm btn-danger d-flex align-items-center" title="Detener" disabled>
                        <i class="bi bi-stop-fill me-1"></i>
                        <span class="d-none d-md-inline">Stop</span>
                    </button>
                </div>

                <div class="btn-group me-3" role="group">
                    <button type="button" id="btnSave" class="btn btn-sm btn-info d-flex align-items-center" title="Guardar (Ctrl+S)">
                        <i class="bi bi-save me-1"></i>
                        <span class="d-none d-md-inline">Save</span>
                    </button>
                    <button type="button" id="btnBeautify" class="btn btn-sm btn-outline-secondary d-flex align-items-center" title="Formatear código">
                        <i class="bi bi-braces me-1"></i>
                        <span class="d-none d-md-inline">Format</span>
                    </button>
                </div>
            </div>

            <div class="d-flex align-items-center">
                <label for="languageId" class="form-label me-2 mb-0 small">Language</label>
                <select id="languageId" name="languageId" class="form-select form-select-sm language-select">
                    <option value="52">C</option>
                    <option value="54">C++</option>
                    <option value="62">Java</option>
                    <option value="71">Python</option>
                    <option value="63">JavaScript</option>
                </select>
                <button type="button" class="btn btn-sm btn-outline-secondary ms-2" title="Configuración">
                    <i class="bi bi-gear-fill"></i>
                </button>
            </div>
        </div>

        <!-- Contenedor principal del editor -->
        <div class="editor-content">
            <textarea name="sourceCode" id="codeEditor" class="d-none">@(ViewBag.SourceCode ?? "")</textarea>
            <div id="editor" style="height: 100%; width: 100%;"></div> <!-- Añadido estilo explícito -->
        </div>

        <!-- Panel inferior con pestañas para resultados -->
        <div class="results-panel">
            <ul class="nav nav-tabs custom-tabs" id="resultTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="output-tab" data-bs-toggle="tab" data-bs-target="#output-content" type="button">
                        <i class="bi bi-terminal-fill me-1"></i> Resultados
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="input-tab" data-bs-toggle="tab" data-bs-target="#input-content" type="button">
                        <i class="bi bi-arrow-down-square me-1"></i> Input
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="stderr-tab" data-bs-toggle="tab" data-bs-target="#stderr-content" type="button">
                        <i class="bi bi-exclamation-triangle me-1"></i> Error
                    </button>
                </li>
            </ul>

            <div class="tab-content results-content">
                <div class="tab-pane fade show active" id="output-content" role="tabpanel">
                    <div class="results-area">
                        @if (ViewBag.Resultados != null)
                        {
                            <ul class="list-unstyled mb-0">
                                @{
                                    int caseNumber = 1;
                                    foreach (var resultado in ViewBag.Resultados)
                                    {
                                        var resultadoTexto = resultado.ToString();
                                        var indiceSeparador = resultadoTexto.IndexOf(":");
                                        if (indiceSeparador >= 0)
                                        {
                                            resultadoTexto = resultadoTexto.Substring(indiceSeparador + 1).Trim();
                                        }

                                        <li class="result-item @(resultado.ToString().Contains("✅") ? "success" : resultado.ToString().Contains("❌") ? "error" : "")">
                                            <strong>Caso @(caseNumber++):</strong> @resultadoTexto
                                        </li>
                                    }
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="placeholder-text">
                                <i class="bi bi-play-circle me-2"></i>
                                Ejecuta tu código para ver los resultados...
                            </div>
                        }
                    </div>
                </div>
                <div class="tab-pane fade" id="input-content" role="tabpanel">
                    <div class="results-area">
                        <div class="mb-2 fw-semibold">
                            <i class="bi bi-list-check me-1"></i>
                            Casos de prueba:
                        </div>
                        <ul class="list-unstyled mb-0">
                            @{
                                int inputCaseNumber = 1;
                                foreach (var caso in Model.CasosDePrueba)
                                {
                                    <li class="input-case-item">
                                        <strong>Caso @(inputCaseNumber++):</strong>
                                        <pre class="input-code">@caso.Input</pre>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div class="tab-pane fade" id="stderr-content" role="tabpanel">
                    <div class="results-area">
                        <pre id="errorText" class="error-text">@(ViewBag.Error ?? "")</pre>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<!-- ACE Editor -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.0/theme-monokai.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.0/theme-github.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.0/ace.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.0/ext-language_tools.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.0/ext-beautify.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.0/ext-modelist.min.js"></script>

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --color-transition: background-color 1.2s ease, color 1.2s ease, border-color 1.2s ease;
        --primary-color: #6c5ce7;
        --success-color: #00b894;
        --danger-color: #e17055;
        --warning-color: #fdcb6e;
        --info-color: #74b9ff;
        --secondary-color: #636e72;
        --transition: all 0.3s ease;
    }

    /* Tema Light */
    [data-theme="light"] {
        --bg-primary: #ffffff;
        --bg-secondary: #f8f9fa;
        --bg-tertiary: #e9ecef;
        --text-primary: #212529;
        --text-secondary: #6c757d;
        --text-muted: #adb5bd;
        --border-color: #dee2e6;
        --shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        --shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);
        --editor-bg: #ffffff;
        --toolbar-bg: #f8f9fa;
        --results-bg: #ffffff;
        --ace-theme: "ace/theme/github";
    }

    /* Tema Dark */
    [data-theme="dark"] {
        --bg-primary: #1a1a1a;
        --bg-secondary: #2d2d2d;
        --bg-tertiary: #404040;
        --text-primary: #ffffff;
        --text-secondary: #adb5bd;
        --text-muted: #6c757d;
        --border-color: #404040;
        --shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.3);
        --shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.5);
        --editor-bg: #1e1e1e;
        --toolbar-bg: #252525;
        --results-bg: #1a1a1a;
        --ace-theme: "ace/theme/monokai";
    }

    /* Estilos base */
    body {
        background-color: var(--bg-secondary);
        color: var(--text-primary);
        transition: var(--transition);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    #mainContainer {
        background-color: var(--bg-secondary);
        min-height: 100vh;
        transition: var(--transition);
    }

    /* Cards temáticos */
    .theme-card {
        background-color: var(--bg-primary);
        border: 1px solid var(--border-color);
        transition: var(--transition);
    }

    .theme-card-header {
        background: linear-gradient(135deg, var(--primary-color), #a29bfe);
        color: white;
        border-bottom: none;
    }

    .theme-card-body {
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }

    /* Editor container */
    .editor-container {
        background-color: var(--bg-primary);
        border: 1px solid var(--border-color);
        border-radius: 0.75rem;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        transition: var(--transition);
    }

    /* Toolbar del editor */
    .editor-toolbar {
        background-color: var(--toolbar-bg);
        border-bottom: 1px solid var(--border-color);
        min-height: 60px;
        flex-shrink: 0;
        transition: var(--transition);
    }

    .file-input-group .input-group-text {
        background-color: var(--bg-tertiary);
        border-color: var(--border-color);
        color: var(--text-secondary);
    }

    .file-input-group .form-control {
        background-color: var(--bg-primary);
        border-color: var(--border-color);
        color: var(--text-primary);
    }

        .file-input-group .form-control:focus {
            background-color: var(--bg-primary);
            border-color: var(--primary-color);
            color: var(--text-primary);
            box-shadow: 0 0 0 0.25rem rgba(108, 92, 231, 0.25);
        }

    .language-select {
        background-color: var(--bg-primary);
        border-color: var(--border-color);
        color: var(--text-primary);
        min-width: 120px;
    }

        .language-select:focus {
            background-color: var(--bg-primary);
            border-color: var(--primary-color);
            color: var(--text-primary);
            box-shadow: 0 0 0 0.25rem rgba(108, 92, 231, 0.25);
        }

    /* Contenido del editor */
    .editor-content {
        flex: 1;
        position: relative;
        min-height: 0;
        background-color: var(--editor-bg);
    }

    #editor {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', 'Monaco', 'Courier New', monospace;
    }

    /* Panel de resultados */
    .results-panel {
        flex-shrink: 0;
        background-color: var(--results-bg);
        border-top: 1px solid var(--border-color);
    }

    .custom-tabs {
        background-color: var(--bg-tertiary);
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 0;
    }

        .custom-tabs .nav-link {
            color: var(--text-secondary);
            background-color: transparent;
            border: none;
            border-radius: 0;
            padding: 0.75rem 1rem;
            transition: var(--transition);
            font-size: 0.875rem;
        }

            .custom-tabs .nav-link:hover {
                color: var(--text-primary);
                background-color: var(--bg-secondary);
            }

            .custom-tabs .nav-link.active {
                color: var(--primary-color);
                background-color: var(--bg-primary);
                border-bottom: 2px solid var(--primary-color);
            }

    .results-content {
        background-color: var(--results-bg);
    }

    .results-area {
        padding: 1rem;
        min-height: 120px;
        max-height: 180px;
        overflow-y: auto;
        font-size: 0.875rem;
        line-height: 1.5;
    }

    .result-item {
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        border-radius: 0.375rem;
        border-left: 4px solid var(--border-color);
        background-color: var(--bg-secondary);
        transition: var(--transition);
    }

        .result-item.success {
            border-left-color: var(--success-color);
            background-color: rgba(0, 184, 148, 0.1);
            color: var(--success-color);
        }

        .result-item.error {
            border-left-color: var(--danger-color);
            background-color: rgba(225, 112, 85, 0.1);
            color: var(--danger-color);
        }

    .input-case-item {
        padding: 0.75rem;
        margin-bottom: 0.75rem;
        background-color: var(--bg-secondary);
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
    }

    .input-code {
        margin-top: 0.5rem;
        margin-bottom: 0;
        padding: 0.75rem;
        background-color: var(--bg-tertiary);
        color: var(--text-primary);
        border-radius: 0.375rem;
        font-size: 0.8rem;
        border: 1px solid var(--border-color);
    }

    .error-text {
        color: var(--danger-color);
        background-color: var(--bg-secondary);
        padding: 1rem;
        border-radius: 0.375rem;
        border: 1px solid var(--danger-color);
        margin: 0;
    }

    .placeholder-text {
        color: var(--text-muted);
        text-align: center;
        padding: 2rem;
        font-style: italic;
    }

    /* Botones personalizados */
    .btn {
        transition: var(--transition);
        font-weight: 500;
    }

    .btn-outline-secondary {
        border-color: var(--border-color);
        color: var(--text-secondary);
    }

        .btn-outline-secondary:hover {
            background-color: var(--bg-tertiary);
            border-color: var(--text-secondary);
            color: var(--text-primary);
        }

    /* Scrollbar personalizado */
    .results-area::-webkit-scrollbar {
        width: 8px;
    }

    .results-area::-webkit-scrollbar-track {
        background: var(--bg-tertiary);
        border-radius: 4px;
    }

    .results-area::-webkit-scrollbar-thumb {
        background: var(--text-muted);
        border-radius: 4px;
    }

        .results-area::-webkit-scrollbar-thumb:hover {
            background: var(--text-secondary);
        }

    /* Animaciones */
    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .result-item {
        animation: slideIn 0.3s ease-out;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .editor-toolbar {
            flex-direction: column;
            gap: 0.75rem;
            padding: 1rem;
        }

            .editor-toolbar > div {
                justify-content: center;
            }

        .results-area {
            max-height: 150px;
        }
    }

    /* ACE Editor theming */
    .ace_editor {
        font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', 'Monaco', 'Courier New', monospace !important;
        line-height: 1.6 !important;
    }

    [data-theme="light"] .ace_editor {
        background-color: #ffffff !important;
    }

    [data-theme="dark"] .ace_editor {
        background-color: #1e1e1e !important;
    }

    /* Efecto de header animado */
    .gradient-header {
        background: var(--primary-gradient);
        padding: 1rem;
        position: relative;
        overflow: hidden;
        transition: var(--color-transition);
    }

        .gradient-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.15) 0%, transparent 70%);
            animation: shimmer 8s ease-in-out infinite;
            transition: var(--color-transition);
        }

    .header-content {
        position: relative;
        z-index: 2;
    }

    .header-title {
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        color: white;
        transition: var(--color-transition);
    }

    .section-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        flex-shrink: 0;
        transition: var(--color-transition);
    }

    @@keyframes shimmer {
        0%, 100%

    {
        transform: rotate(0deg);
        opacity: 0.5;
    }

    50% {
        transform: rotate(180deg);
        opacity: 0.8;
    }

    }
    </style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Obtener referencia al body y al elemento html
        const body = document.body;
        const htmlElement = document.documentElement;

        // Función para aplicar tema al editor ACE y a los estilos personalizados
        function applyTheme(theme) {
            // Aplicar tema al editor ACE
            if (window.aceEditor) {
                const aceTheme = theme === 'dark' ? 'ace/theme/monokai' : 'ace/theme/github';
                window.aceEditor.setTheme(aceTheme);
            }

            // Actualizar el atributo data-theme para los estilos personalizados
            body.setAttribute('data-theme', theme);
        }

        // Observar cambios en el atributo data-bs-theme
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === 'data-bs-theme') {
                    const currentTheme = htmlElement.getAttribute('data-bs-theme') || 'dark';
                    applyTheme(currentTheme);
                    localStorage.setItem('theme', currentTheme);
                }
            });
        });

        // Configurar el observador
        observer.observe(htmlElement, {
            attributes: true,
            attributeFilter: ['data-bs-theme']
        });

        // Inicialización del editor ACE con el tema actual
        const currentTheme = htmlElement.getAttribute('data-bs-theme') || localStorage.getItem('theme') || 'dark';
        const editor = ace.edit("editor", {
            theme: currentTheme === 'dark' ? "ace/theme/monokai" : "ace/theme/github",
            mode: "ace/mode/c_cpp",
            fontSize: "14px",
            showPrintMargin: false,
            highlightActiveLine: true,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            enableSnippets: true,
            fixedWidthGutter: true,
            useWorker: true,
            displayIndentGuides: true,
            scrollPastEnd: 0.5,
            tabSize: 4,
            useSoftTabs: true,
            wrap: false,
            cursorStyle: "ace",
            showInvisibles: false,
            behavioursEnabled: true,
            animatedScroll: false
        });

        // Hacer el editor accesible globalmente
        window.aceEditor = editor;
        editor.$blockScrolling = Infinity;
        editor.renderer.setScrollMargin(10, 10);

        // Establecer contenido inicial
        editor.session.setValue(document.getElementById('codeEditor').value || "");
        editor.clearSelection();
        editor.renderer.updateFull(true);

        // Sincronizar textarea con el editor ACE
        editor.session.on('change', function() {
            document.getElementById('codeEditor').value = editor.getValue();
        });

        // Mapeo de lenguajes
        const languageMap = {
            '52': 'c_cpp',
            '54': 'c_cpp',
            '62': 'java',
            '71': 'python',
            '63': 'javascript'
        };

        const extensions = {
            '52': '.c',
            '54': '.cpp',
            '62': '.java',
            '71': '.py',
            '63': '.js'
        };

        // Cambiar modo de lenguaje
        document.getElementById('languageId').addEventListener('change', function() {
            const lang = this.value;
            editor.session.setMode(`ace/mode/${languageMap[lang]}`);

            const fileNameInput = document.getElementById('fileNameInput');
            const currentName = fileNameInput.value.split('.')[0];
            fileNameInput.value = currentName + extensions[lang];

            setTimeout(() => {
                editor.renderer.updateFull(true);
            }, 50);
        });

        // Función para formatear el código
        document.getElementById('btnBeautify').addEventListener('click', function() {
            const beautify = ace.require("ace/ext/beautify");
            beautify.beautify(editor.session);
        });

        // Función para guardar el código
        document.getElementById('btnSave').addEventListener('click', function() {
            const blob = new Blob([editor.getValue()], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = document.getElementById('fileNameInput').value;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        // Función para detener ejecución
        document.getElementById('btnStop').addEventListener('click', function() {
            document.getElementById('btnRun').disabled = false;
            this.disabled = true;

            document.getElementById('errorText').textContent = 'Ejecución detenida por el usuario.';
            document.getElementById('stderr-tab').click();
        });

        // Manejo del formulario con AJAX
        document.getElementById('codeForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const btnRun = document.getElementById('btnRun');
            const btnStop = document.getElementById('btnStop');

            btnRun.disabled = true;
            btnStop.disabled = false;
            btnRun.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span><span class="d-none d-md-inline">Running...</span>';

            const formData = new FormData(this);

            fetch(this.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');

                const resultadosContainer = doc.querySelector('#output-content');
                if (resultadosContainer) {
                    document.getElementById('output-content').innerHTML = resultadosContainer.innerHTML;
                    document.getElementById('output-tab').click();
                }

                const errorContainer = doc.querySelector('#stderr-content');
                if (errorContainer) {
                    document.getElementById('stderr-content').innerHTML = errorContainer.innerHTML;
                    if (errorContainer.textContent.trim() !== '') {
                        document.getElementById('stderr-tab').click();
                    }
                }
            })
            .catch(error => {
                document.getElementById('errorText').textContent = 'Error al comunicarse con el servidor: ' + error;
                document.getElementById('stderr-tab').click();
            })
            .finally(() => {
                btnRun.disabled = false;
                btnStop.disabled = true;
                btnRun.innerHTML = '<i class="bi bi-play-fill me-1"></i><span class="d-none d-md-inline">Run</span>';
            });
        });

        // Atajos de teclado
        editor.commands.addCommand({
            name: 'run',
            bindKey: {win: 'F9', mac: 'F9'},
            exec: function() {
                document.getElementById('btnRun').click();
            }
        });

        editor.commands.addCommand({
            name: 'save',
            bindKey: {win: 'Ctrl-S', mac: 'Command-S'},
            exec: function() {
                document.getElementById('btnSave').click();
                return true;
            }
        });

        // Funciones de redimensionamiento
        function resizeEditor() {
            editor.resize(true);
            editor.renderer.updateFull(true);
        }

        setTimeout(resizeEditor, 100);
        window.addEventListener('resize', resizeEditor);

        // Actualización al hacer clic
        document.getElementById('editor').addEventListener('click', function() {
            setTimeout(() => {
                editor.renderer.updateFull(true);
            }, 10);
        });

        // Aplicar tema inicial
        applyTheme(currentTheme);
    });
</script>